package com.cas.das.core.ftpclient;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;

import net.jlrnt.dbc.DataManager;
import net.jlrnt.dbc.DataMap;

import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.core.session.IoSession;

import com.cas.das.core.entity.DataReconciliationProtocol;
import com.cas.das.core.entity.ResponseProtocol;
import com.cas.das.core.util.CodeCheckUtil;
import com.cas.das.core.util.DataTransmission;
import com.cas.das.core.util.DocumentProcessing;

public class MyClientHandler extends IoHandlerAdapter {
	private DataManager dataManger;//数据库连接
	private LinkedBlockingQueue<DataTransmission> queue;//队列
	private Map<String,String> monitorMap;//存储了要监测的文件目录
	
	public MyClientHandler(DataManager dataManger,LinkedBlockingQueue<DataTransmission> queue,Map<String,String> monitorMap){
		super();
		this.dataManger = dataManger;
		this.queue = queue;
		this.monitorMap = monitorMap;
	}

	@Override
	public void exceptionCaught(IoSession session, Throwable cause) throws Exception {
		/* 这个方法在你的程序、Mina 自身出现异常时回调，一般这里是关闭IoSession。 */
		System.out.println("异常*********************************************");
		System.out.println(cause.getMessage());
		System.out.println(cause.getLocalizedMessage());
		sessionClosed(session);
	}

	@Override
	public void inputClosed(IoSession session) throws Exception {
		//输入关闭时
		super.inputClosed(session);
	}

	@SuppressWarnings("unchecked")
	@Override
	public void messageReceived(IoSession session, Object message) throws Exception {
		/*
		 * 接收到消息时调用的方法，也就是用于接收消息的方法，一般情况下，message 是一个IoBuffer 类，如果你使用了协议编解码器，
		 * 那么可以强制转换为你需要的类型。通常我们都是会使用协议编解码器的， 就像上面的例子， 因为协议编解码器是
		 * TextLineCodecFactory，所以我们可以强制转message 为String 类型。
		 */
		//TODO
		//1   数据回补
		//数据发送后平台应答（移动已发送数据的文件）
		Map<String,String> map = (Map<String,String>) message;
		System.out.println("********Client**********");
		System.out.println("Request is " + map.get("dataType"));
		/*System.out.println(map.get("siteCode"));
		System.out.println(map.get("dataTime"));
		System.out.println(map.get("data"));*/
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
		SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		if(map.get("dataType").equals("JC16")){
			dataRetrieval(map);
		}else if(map.get("dataType").equals("JZ22")||map.get("dataType").equals("JZ21")){
			System.out.println(map.get("packetNumber")+"***"+map.get("totalPackage"));
			if(map.get("packetNumber").equals(map.get("totalPackage"))){
				String data = map.get("data");
				String[] datas = data.split("\\|");
				String dataTime = map.get("dataTime");
				String filePath = monitorMap.get(datas[1]);
				String mt = getMT(datas[1]);
				String formatTime = format.format(format1.parse(dataTime));
				File file = new File(filePath+"\\"+mt+"-"+formatTime+".txt");
				DocumentProcessing.moveFile(file);
				DocumentProcessing.deleteFile(file);				
			}
		}else if(map.get("dataType").equals("JC07")||map.get("dataType").equals("JC08")){
			String data = map.get("data");
			String[] datas = data.split("\\|");
			String dataTime = map.get("dataTime");
			String filePath = monitorMap.get(datas[1]);
			String mt = getMT(datas[1]);
			String formatTime = format.format(format1.parse(dataTime));
			File file = new File(filePath+"\\"+mt+"-"+formatTime+".txt");
			DocumentProcessing.moveFile(file);
			DocumentProcessing.deleteFile(file);
		}
	}

	@Override
	public void messageSent(IoSession session, Object message) throws Exception {
		/*
		 * 当发送消息成功时调用这个方法，注意这里的措辞，发送成功之后，也就是说发送消息是不能用这个方法的。 发送消息的时机：
		 * 发送消息应该在sessionOpened()、messageReceived()方法中调用IoSession.write()方法完成。
		 * 因为在sessionOpened()方法中，TCP 连接已经真正打开，同样的在messageReceived()方法TCP
		 * 连接也是打开状态，只不过两者的时机不同。 sessionOpened()方法是在TCP
		 * 连接建立之后，接收到数据之前发送；messageReceived()方法是在接收到数据之后发送，
		 * 你可以完成依据收到的内容是什么样子，决定发送什么样的数据。
		 * 因为这个接口中的方法太多，因此通常使用适配器模式IoHandlerAdapter，覆盖你所感兴趣的方法即可。
		 */
		super.messageSent(session, "ok");
	}

	@Override
	public void sessionClosed(IoSession session) throws Exception {
		/* 对于TCP 来说，连接被关闭时，调用这个方法。对于UDP 来说，IoSession 的close()方法被调用时才会毁掉这个方法。 */
		super.sessionClosed(session);
	}

	@Override
	public void sessionCreated(IoSession session) throws Exception {
		/*
		 * 对于TCP 连接来说，连接被接受的时候调用，但要注意此时TCP 连接并未建立，此方法仅代表字面含义， 也就是连接的对象IoSession
		 * 被创建完毕的时候，回调这个方法。 对于UDP 来说，当有数据包收到的时候回调这个方法，因为UDP 是无连接的。
		 */
		super.sessionCreated(session);
	}

	@Override
	public void sessionIdle(IoSession session, IdleStatus status) throws Exception {
		/* 这个方法在IoSession 的通道进入空闲状态时调用，对于UDP 协议来说，这个方法始终不会被调用。 */
		super.sessionIdle(session, status);
	}

	@Override
	public void sessionOpened(IoSession session) throws Exception {
		/*
		 * 这个方法在连接被打开时调用，它总是在sessionCreated()方法之后被调用。 对于TCP
		 * 来说，它是在连接被建立之后调用，你可以在这里执行一些认证操作、发送数据等。 对于UDP
		 * 来说，这个方法与sessionCreated()没什么区别，但是紧跟其后执行。
		 * 如果你每隔一段时间，发送一些数据，那么sessionCreated
		 * ()方法只会在第一次调用，但是sessionOpened()方法每次都会调用。
		 */
		super.sessionOpened(session);
	}
	
	//数据回补指令（JC16）响应方法
	private void dataRetrieval(Map<String, String> map) throws Exception {
		List<DataTransmission> list = new ArrayList<DataTransmission>();
		// 进行数据回补逻辑(JC17-->JC18-->JC20-->JC18-->JC17)
		ResponseProtocol jc17 = getJC("JC17", map);

		ResponseProtocol jc18 = getJC("JC18", map);

		list.add(jc17);
		list.add(jc18);

		// TODO
		// JC20数据回补：
		// 1、查询数据库，拼接json字段
		String[] datas = map.get("data").split("\\|");
		
		String typeCode = datas[1];
		String mt = getMT(typeCode);
		
		String startTime = datas[2];
		
		String endTime = datas[3];
		
		//String sql = getSQL(mt,startTime,endTime);
		//得到数据库查询结果
		//List<DataMap> datamap = dataManger.getDataList(sql);
		//生成数据包数据部分
		List<String> jsonStrs = new ArrayList<String>();
		/*if(mt.equals("LIDAR_WIND")){
			getPacgeDataWind(datamap,map,jsonStrs);
		}else if(mt.equals("LIDAR_PARTICULATE")){
			getPacgeDataParticulate(datamap,map,jsonStrs);
		}else if(mt.equals("LIDAR_PARTICULATE")){
			getPacgeDataWave(datamap,map,jsonStrs);
		}else if(mt.equals("VOCs")){
			getPacgeDataVocs(datamap,map,jsonStrs);
		}*/
		
		//测试数据，用完注释掉
		jsonStrs.add("{'type':'012','content':{'2001':{'0.051':'3.46','0.077':'2.26','0.103':'2.36','0.129':'2.39','0.155':'2.21','0.181':'2.27','0.207':'2.31','0.233':'2.29','0.259':'2.29','0.285':'2.19','0.311':'2.12','0.337':'2.18','0.363':'2.23','0.389':'2.3','0.415':'2.28','0.441':'2.26','0.467':'2.22','0.493':'2.29','0.519':'2.31','0.545':'2.31','0.571':'2.3','0.597':'2.28','0.623':'2.18','0.649':'2.08','0.675':'2.12','0.701':'2.1','0.727':'2.09','0.753':'2.11','0.779':'2.11','0.805':'2.16','0.831':'2.22','0.857':'2.34','0.883':'2.42','0.909':'2.43','0.935':'2.37','0.961':'2.34','0.987':'2.3','1.013':'2.2','1.039':'2.16','1.065':'2.11','1.091':'2.05','1.117':'2.08','1.143':'2.04','1.169':'2.09','1.195':'2.16','1.221':'2.21','1.247':'2.19','1.273':'2.22','1.299':'2.17','1.325':'2.15','1.35':'2.11','1.376':'2.09','1.402':'2.1','1.428':'2.04','1.454':'1.94','1.48':'2.07','1.506':'2.18','1.532':'2.17','1.558':'1.93','1.584':'2.03','1.61':'1.88','1.636':'1.99','1.662':'2.01','1.688':'2','1.714':'2.03','1.74':'2.09','1.766':'1.94','1.792':'1.8','1.818':'2.04','1.844':'2.41','1.87':'1.73','1.896':'1.79','1.922':'2.41','1.948':'999','1.974':'999','2.0':'999','2.026':'999','2.052':'999','2.078':'999','2.104':'999','2.13':'999','2.156':'999','2.182':'999','2.208':'999','2.234':'999','2.26':'999','2.286':'999','2.312':'999','2.338':'999','2.364':'999','2.39':'999','2.416':'999','2.442':'999','2.468':'999','2.494':'999','2.52':'999','2.546':'999','2.572':'999','2.598':'999','2.624':'999','2.65':'999','2.676':'999','2.701':'999','2.727':'999','2.753':'999','2.779':'999','2.805':'999','2.831':'999','2.857':'999','2.883':'999','2.909':'999','2.935':'999','2.961':'999','2.987':'999','3.013':'999','3.039':'999','3.065':'999','3.091':'999','3.117':'999','3.143':'999','3.169':'999','3.195':'999','3.221':'999','3.247':'999','3.273':'999','3.299':'999','3.325':'999','3.351':'999','3.377':'999','3.403':'999','3.429':'999','3.455':'999','3.481':'999','3.507':'999','3.533':'999','3.559':'999','3.585':'999','3.611':'999','3.637':'999','3.663':'999','3.689':'999','3.715':'999','3.741':'999','3.767':'999','3.793':'999','3.819':'999','3.845':'999','3.871':'999','3.897':'999','3.923':'999','3.949':'999','3.975':'999','4.001':'999','4.027':'999','4.052':'999','4.078':'999','4.104':'999','4.13':'999','4.156':'999','4.182':'999','4.208':'999','4.234':'999','4.26':'999','4.286':'999','4.312':'999','4.338':'999','4.364':'999','4.39':'999','4.416':'999','4.442':'999','4.468':'999','4.494':'999','4.52':'999','4.546':'999','4.572':'999','4.598':'999','4.624':'999','4.65':'999','4.676':'999','4.702':'999','4.728':'999','4.754':'999','4.78':'999','4.806':'999','4.832':'999','4.858':'999','4.884':'999','4.91':'999','4.936':'999','4.962':'999','4.988':'999','5.014':'999'}}}");
		// 如果有多个时间段可以分别发送，如多字段过长要分包
		if (0 != jsonStrs.size()) {
			for (String jsonStr : jsonStrs) {
				byte[] zip = null;
				try {
					// 对字符串进行压缩
					zip = CodeCheckUtil.compress(jsonStr.getBytes("GB2312"));
				} catch (UnsupportedEncodingException e1) {
					e1.printStackTrace();
				} catch (Exception e1) {
					e1.printStackTrace();
				}
				// 得到压缩和分包后的数据字符串
				List<byte[]> zips = CodeCheckUtil.toSubcontract(zip);
				for (int i = 0; i < zips.size(); i++) {
					System.out.println(zips.size());
					DataReconciliationProtocol jc20 = getJC20(map, zips.size(), i + 1, zips.get(i));
					// 加入回补指令集合中
					list.add(jc20);
				}
			}
		} else {
			// 没有数据时返回空包
			DataReconciliationProtocol jc20 = getJC20(map, 1, 1, new byte[0]);
			list.add(jc20);
		}

		list.add(jc18);
		list.add(jc17);
		// 3、生成回补实体类集合，插入队列。
		CodeCheckUtil.sendQueue(queue, list);
		
	}
	
	private void getPacgeDataWind(List<DataMap> datamap,Map<String, String> map,List<String> jsonStrs){
		for (DataMap dataMap : datamap) {
			Map<String,String> jsons = new HashMap<String,String>();
			String datatime = (String) dataMap.get("datatime");
			String windSpeed = (String) dataMap.get("f001");
			String windDirection = (String) dataMap.get("f002");
			String maxWindSpeed = (String) dataMap.get("f003");
			String minWindSpeed = (String) dataMap.get("f004");
			String zwind = (String) dataMap.get("f005");
			String stdDev = (String) dataMap.get("f006");
			String meanSNR = (String) dataMap.get("f007");
			String windShear = (String) dataMap.get("f008");
			jsons.put("2001",windSpeed);
			jsons.put("2002",windDirection);
			jsons.put("2003",maxWindSpeed);
			jsons.put("2004",minWindSpeed);
			jsons.put("2005",zwind);
			jsons.put("2006",stdDev);
			jsons.put("2007",meanSNR);
			jsons.put("2008",windShear);
			
			StringBuilder text = new StringBuilder("{\"type\":\"012\",\"content\":{");
			
			Set<String> set = jsons.keySet();
			for (String key : set) {
				text.append("\"").append(key).append("\":").append(jsons.get(key)).append(",");
				
			}
			text.deleteCharAt(text.length()-1).append("}}");
			String requestData = map.get("data");
			String[] requests = requestData.split("\\|");
			String packge = requests[0]+","+datatime+","+requests[1]+","+text.toString()+",";
			jsonStrs.add(packge);
		}
	}
	
	private void getPacgeDataParticulate(List<DataMap> datamap,Map<String, String> map,List<String> jsonStrs){
		for (DataMap dataMap : datamap) {
			Map<String,String> jsons = new HashMap<String,String>();
			String datatime = (String) dataMap.get("datatime");
			String partAod = (String) dataMap.get("f017");
			String partVisibility = (String) dataMap.get("f018");
			String partPbl = (String) dataMap.get("f019");
			String partOriginal1 = (String) dataMap.get("f001");
			String partOriginal2 = (String) dataMap.get("f002");
			String partOriginal3 = (String) dataMap.get("f003");
			String partExtin355 = (String) dataMap.get("f007");
			String partExtin532 = (String) dataMap.get("f008");
			String partDepol = (String) dataMap.get("f009");
			String partGradient = (String) dataMap.get("f013");
			String partPm10 = (String) dataMap.get("f015");
			jsons.put("1017",partAod);
			jsons.put("1018",partVisibility);
			jsons.put("1019",partPbl);
			jsons.put("1001",partOriginal1);
			jsons.put("1002",partOriginal2);
			jsons.put("1003",partOriginal3);
			jsons.put("1007",partExtin355);
			jsons.put("1008",partExtin532);
			jsons.put("1009",partDepol);
			jsons.put("1013",partGradient);
			jsons.put("1015",partPm10);
			
			StringBuilder text = new StringBuilder("{\"type\":\"011\",\"content\":{");
			
			Set<String> set = jsons.keySet();
			for (String key : set) {
				text.append("\"").append(key).append("\":").append(jsons.get(key)).append(",");
				
			}
			text.deleteCharAt(text.length()-1).append("}}");
			String requestData = map.get("data");
			String[] requests = requestData.split("\\|");
			String packge = requests[0]+","+datatime+","+requests[1]+","+text.toString()+",";
			jsonStrs.add(packge);
		}
	}
	
	private void getPacgeDataWave(List<DataMap> datamap,Map<String, String> map,List<String> jsonStrs){
		for (DataMap dataMap : datamap) {
			Map<String,String> jsons = new HashMap<String,String>();
			String datatime = (String) dataMap.get("datatime");
			String humiFs = (String) dataMap.get("f016");
			String humiLiquidTotal = (String) dataMap.get("f006");
			String humiAzimuth = (String) dataMap.get("f009");
			String humiAop = (String) dataMap.get("f010");
			String humiVaporTotal = (String) dataMap.get("f005");
			String humiTem = (String) dataMap.get("f013");
			String humiJyl = (String) dataMap.get("f012");
			String humiFx = (String) dataMap.get("f017");
			String humiPressure = (String) dataMap.get("f015");
			String humiHwlw = (String) dataMap.get("f008");
			String humiYdgd = (String) dataMap.get("f007");
			String humiVapor = (String) dataMap.get("f002");
			String humiHumidity = (String) dataMap.get("f004");
			String humiTemp = (String) dataMap.get("f001");
			String humiPblTemp = (String) dataMap.get("f018");
			jsons.put("3009",humiFs);
			jsons.put("3017",humiLiquidTotal);
			jsons.put("3007",humiAzimuth);
			jsons.put("3008",humiAop);
			jsons.put("3016",humiVaporTotal);
			jsons.put("3011",humiTem);
			jsons.put("3003",humiJyl);
			jsons.put("3010",humiFx);
			jsons.put("3006",humiPressure);
			jsons.put("3002",humiHwlw);
			jsons.put("3018",humiYdgd);
			jsons.put("3013",humiVapor);
			jsons.put("3005",humiHumidity);
			jsons.put("3004",humiTemp);
			jsons.put("3015",humiPblTemp);
			
			StringBuilder text = new StringBuilder("{\"type\":\"011\",\"content\":{");
			
			Set<String> set = jsons.keySet();
			for (String key : set) {
				text.append("\"").append(key).append("\":").append(jsons.get(key)).append(",");
				
			}
			text.deleteCharAt(text.length()-1).append("}}");
			String requestData = map.get("data");
			String[] requests = requestData.split("\\|");
			String packge = requests[0]+","+datatime+","+requests[1]+","+text.toString()+",";
			jsonStrs.add(packge);
		}
	}
	
	//TODO VOC数据回补查询数据库方法未完成
	private void getPacgeDataVocs(List<DataMap> datamap,Map<String, String> map,List<String> jsonStrs){
		for (DataMap dataMap : datamap) {
			Map<String,String> jsons = new HashMap<String,String>();
			String datatime = (String) dataMap.get("datatime");
			String humiFs = (String) dataMap.get("f016");
			String humiLiquidTotal = (String) dataMap.get("f006");
			String humiAzimuth = (String) dataMap.get("f009");
			String humiAop = (String) dataMap.get("f010");
			String humiVaporTotal = (String) dataMap.get("f005");
			String humiTem = (String) dataMap.get("f013");
			String humiJyl = (String) dataMap.get("f012");
			String humiFx = (String) dataMap.get("f017");
			String humiPressure = (String) dataMap.get("f015");
			String humiHwlw = (String) dataMap.get("f008");
			String humiYdgd = (String) dataMap.get("f007");
			String humiVapor = (String) dataMap.get("f002");
			String humiHumidity = (String) dataMap.get("f004");
			String humiTemp = (String) dataMap.get("f001");
			String humiPblTemp = (String) dataMap.get("f018");
			jsons.put("3009",humiFs);
			jsons.put("3017",humiLiquidTotal);
			jsons.put("3007",humiAzimuth);
			jsons.put("3008",humiAop);
			jsons.put("3016",humiVaporTotal);
			jsons.put("3011",humiTem);
			jsons.put("3003",humiJyl);
			jsons.put("3010",humiFx);
			jsons.put("3006",humiPressure);
			jsons.put("3002",humiHwlw);
			jsons.put("3018",humiYdgd);
			jsons.put("3013",humiVapor);
			jsons.put("3005",humiHumidity);
			jsons.put("3004",humiTemp);
			jsons.put("3015",humiPblTemp);
			
			StringBuilder text = new StringBuilder("{\"type\":\"011\",\"content\":{");
			
			Set<String> set = jsons.keySet();
			for (String key : set) {
				text.append("\"").append(key).append("\":").append(jsons.get(key)).append(",");
				
			}
			text.deleteCharAt(text.length()-1).append("}}");
			String requestData = map.get("data");
			String[] requests = requestData.split("\\|");
			String packge = requests[0]+","+datatime+","+requests[1]+","+text.toString()+",";
			jsonStrs.add(packge);
		}
	}
	
	private static String getSQL(String mt,String startTime,String endTime){
		StringBuilder sql = new StringBuilder("SELECT ");
		String factors = null;
		switch (mt) {
		//风廓线
		case "LIDAR_WIND":
			factors = "datatime,f001,f002,f003,f004,f005,f006,f007,f008";
			break;
		//气溶胶颗粒物
		case "LIDAR_PARTICULATE":
			factors = "datatime,f017,f018,f019,f001,f002,f003,f007,f008,f009,f013,f015";
			break;
		//风廓线
		case "MICRO_WAVE":
			factors = "datatime,f016,f006,f009,f014,f010,f005,f013,f012,f017,f015,f008,f007,f002,f004,f001,f018";
			break;
		default:
			//VOC数据
			factors = "datatime,";
			break;
		}
		sql.append(factors);
		sql.append(" FROM MT_DATA_JSON_2017 WHERE mt = ");
		sql.append(mt);
		sql.append(" AND ");
		sql.append(startTime);
		sql.append(" <= datatime AND datatime <= ");
		sql.append(endTime);
		sql.append(" ORDER BY datatime");
		return sql.toString();
	}
	
	private String getMT(String typeCode){
		Map<String,String> mtMap = new HashMap<String,String>();
		mtMap.put("011", "LIDAR_PARTICULATE");
		mtMap.put("012", "LIDAR_WIND");
		mtMap.put("013", "MICRO_WAVE");
		mtMap.put("014", "VOCs");
		mtMap.put("021", "STATUSLIDAR_PARTICULATE");
		mtMap.put("022", "STATUSLIDAR_WIND");
		mtMap.put("023", "STATUSMICRO_WAVE");
		mtMap.put("024", "STATUSVOCs");
		return mtMap.get(typeCode);
	}

	private ResponseProtocol getJC(String dataType, Map<String, String> map) {
		ResponseProtocol jc = new ResponseProtocol();
		jc.setDataType(dataType);
		jc.setSiteCode(map.get("siteCode"));
		jc.setHeadDelimiter("@@@");
		// 数据回补响应生成实体类的data部分传入请求时间加请求具体内容字符串，setData方法进一步进行处理，生成响应具体内容
		jc.setData(map.get("dataTime") + "|" + map.get("data"));
		jc.setTailDelimiter("tek");
		jc.setTerminator("####");
		return jc;

	}

	private DataReconciliationProtocol getJC20(Map<String, String> map,
			int totalPackage, int packetNumber, byte[] data) {
		DataReconciliationProtocol jc20 = new DataReconciliationProtocol();
		jc20.setDataType("JC20");
		jc20.setSiteCode(map.get("siteCode"));
		jc20.setTotalPackage(totalPackage);
		jc20.setPacketNumber(packetNumber);
		jc20.setHeadDelimiter("@@@");
		jc20.setData(data);
		jc20.setTailDelimiter("tek");
		jc20.setTerminator("####");
		return jc20;
	}
}
