package com.cas.das.core.service.type;

import java.net.InetSocketAddress;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;

import net.jlrnt.dbc.DataManager;

import org.apache.mina.core.RuntimeIoException;
import org.apache.mina.core.future.ConnectFuture;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.transport.socket.nio.NioSocketConnector;

import com.cas.das.core.C3P0DataSource;
import com.cas.das.core.entity.FileDirectoryMonitor;
import com.cas.das.core.entity.HeartbeatSend;
import com.cas.das.core.entity.MessageSending;
import com.cas.das.core.ftpclient.ClientCodecFactory;
import com.cas.das.core.ftpclient.HeartBeatListener;
import com.cas.das.core.ftpclient.MyClientHandler;
import com.cas.das.core.util.DataTransmission;
import com.cas.platform.service.ServiceHandle;
import com.cas.platform.service.ServiceType;
import com.cas.platform.service.def.param.MappingParam;
import com.cas.platform.service.def.param.TextParam;

/**
 * 总站蓝天项目远程数据传输
 * 
 * @author yushun-gong
 */
public class FTPClientImportType extends ServiceType {

	@Override
	public boolean startupService(ServiceHandle handle) {
		String siteCode = (String) ((TextParam) handle.getServiceTypeParam("siteCode")).getValue();
		Map<String,String> monitorMap = (Map<String,String>) ((MappingParam) handle.getServiceTypeParam("monitorMap")).getMapping();
		String intervalTime = (String) ((TextParam) handle.getServiceTypeParam("intervalTime")).getValue();
		try {
			// 定义数据库链接信息
			String dbDriver = ((TextParam) handle.getProcessorInnerParam("driverClass")).getValue();
			String dbUrl = ((TextParam) handle.getProcessorInnerParam("url")).getValue();
			String dbUsr = ((TextParam) handle.getProcessorInnerParam("user")).getValue();
			String dbPwd = ((TextParam) handle.getProcessorInnerParam("password")).getValue();
			String ip = ((TextParam) handle.getProcessorInnerParam("ip")).getValue();
			String port = ((TextParam) handle.getProcessorInnerParam("port")).getValue();

			C3P0DataSource DBSource = C3P0DataSource.build(dbDriver, dbUrl, dbUsr, dbPwd, 1, 1, 10, 1, 2800);
			DataManager dataManger = new DataManager();
			dataManger.setLocalSource(DBSource);
			
			//type字段用于使线程循环
			boolean type = true;
			
			// 创建一个阻塞队列，存放数据传输协议生成实体类
			LinkedBlockingQueue<DataTransmission> queue = new LinkedBlockingQueue<DataTransmission>();
			
			//得到连接Session
			MyClientHandler myClientHandler = new MyClientHandler(dataManger,queue,monitorMap);
			IoSession session = initClientMina(myClientHandler,handle,ip,port,type);
			handle.setAttribute("queue", queue);
			
			
			// 创建心跳线程
			HeartbeatSend heartbeatSend = new HeartbeatSend(queue, intervalTime, type, siteCode);
			Thread sendHeartbeat = new Thread(heartbeatSend);
			//sendHeartbeat.start();
			handle.setAttribute("heartbeatSend", heartbeatSend);
			
			//创建文件目录监视线程
			Set<String> keys = monitorMap.keySet();
			handle.setAttribute("keys", keys);
			for (String key : keys) {
				FileDirectoryMonitor fileDirectoryMonitor = new FileDirectoryMonitor(queue,monitorMap.get(key),siteCode,intervalTime,type);
				Thread fileDirectoryThread = new Thread(fileDirectoryMonitor);
				fileDirectoryThread.start();
				handle.setAttribute(key, fileDirectoryMonitor);
			}
			
			//创建数据发送线程，循环发送数据包
			MessageSending messageSending = new MessageSending(queue,session,type);
			Thread sendDataThread = new Thread(messageSending);
			sendDataThread.start();
			handle.setAttribute("messageSending", messageSending);
			handle.setAttribute("sendDataThread", sendDataThread);
			
		} catch (Exception e) {
			return false;
		}

		return true;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public boolean shutdownService(ServiceHandle handle) {
		handle.removeAttribute("queue");

		Set<String> keys = (Set<String>) handle.getAttribute("keys");
		for (String key : keys) {
			FileDirectoryMonitor fileDirectoryMonitor = (FileDirectoryMonitor) handle.getAttribute(key);
			fileDirectoryMonitor.setType(false);
			handle.removeAttribute(key);
		}
		handle.removeAttribute("keys");
		HeartbeatSend heartbeatSend = (HeartbeatSend) handle.getAttribute("heartbeatSend");
		heartbeatSend.setType(false);
		handle.removeAttribute("heartbeatSend");
		MessageSending messageSending = (MessageSending) handle.getAttribute("messageSending");
		messageSending.setType(false);
		handle.removeAttribute("messageSending");
		handle.removeAttribute("sendDataThread");
		
		return true;
	}
	
	public IoSession clientServer(MyClientHandler myClientHandler){
		NioSocketConnector connector = new NioSocketConnector();
		connector.getFilterChain().addLast("encode", new ProtocolCodecFilter(new ClientCodecFactory("GB2312","UTF-8")));
		connector.getSessionConfig().setReadBufferSize(2048);
		connector.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 10);
		connector.setConnectTimeoutMillis(30000);
		connector.setHandler(myClientHandler);
		ConnectFuture cf = connector.connect(new InetSocketAddress("10.5.11.116", 53421));
		cf.awaitUninterruptibly();
		IoSession session = cf.getSession();
		return session;
	}
	
	@SuppressWarnings("deprecation")
	public IoSession initClientMina(MyClientHandler myClientHandler,ServiceHandle handle,String ip,String port,boolean type) {
		NioSocketConnector connector = null;
		IoSession session = null;
		try {
			connector = new NioSocketConnector();
			connector.setHandler(myClientHandler);
			connector.getFilterChain().addLast(
					"codec",
					new ProtocolCodecFilter(new ClientCodecFactory("GB2312",
							"UTF-8")));// 添加Filter对象
		} catch (Exception e2) {
			e2.printStackTrace();
			System.out.println(e2.toString());
		}
		connector.setConnectTimeout(5000);// 设置连接超时时间
		int count = 0;// 记录连接次数
		while (true) {
			try {
				count++;
				// 执行到这里表示客户端刚刚启动需要连接服务器,第一次连接服务器的话是没有尝试次数限制的，但是随后的断线重连就有次数限制了
				ConnectFuture future = connector.connect(new InetSocketAddress(ip, Integer.parseInt(port)));
				future.awaitUninterruptibly();// 一直阻塞,直到连接建立
				session = future.getSession();// 获取Session对象
				if (session.isConnected()) {
					// 表示连接成功
					System.out.println("client connection server successful......");
					break;
				}
			} catch (RuntimeIoException e) {
				System.out.println("The " + count + " client connection server failed");
				try {
					Thread.sleep(2000);// 如果本次连接服务器失败，则间隔2s后进行重连操作
					System.out.println(" : 开始第" + (count + 1) + "次连接服务器");
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
		}
		// 为MINA客户端添加监听器，当Session会话关闭的时候，进行自动重连
		connector.addListener(new HeartBeatListener(connector, handle,ip,port,type));
		return session;
	}

}
