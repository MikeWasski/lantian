package com.cas.das.core.entity;

import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;

import com.cas.das.core.ftpclient.DocumentProcessing;
import com.cas.das.core.util.CodeCheckUtil;
import com.cas.das.core.util.DataTransmission;

public class FileDirectoryMonitor implements Runnable{
	private LinkedBlockingQueue<DataTransmission> queue;
	private String monitorDir;
	private String siteCode;
	private String intervalTime;
	private boolean type;
	
	@Override
	public void run() {
		while(type){
			try {
				Map<String, String> map = DocumentProcessing.readFile(monitorDir);
				Set<String> keys = map.keySet();
				SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
				SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				if (keys.size() != 0) {
					for (String key : keys) {
						String mt = key.split("-")[0];
						String datestring = key.split("-")[1];
						Date date = null;
						try {
							date = format.parse(datestring);
						} catch (ParseException e) {
							e.printStackTrace();
						}
						String datestr = format1.format(date);
						//得到要发送的数据字符串
						String value = map.get(key);
						byte[] zip = null;
						try {
							//对字符串进行压缩
							zip = CodeCheckUtil.compress(value.getBytes("GB2312"));
						} catch (UnsupportedEncodingException e1) {
							e1.printStackTrace();
						} catch (Exception e1) {
							e1.printStackTrace();
						}
						//TODO 数据压缩然后分包
						//得到压缩和分包后的数据字符串
						List<byte[]> zips = CodeCheckUtil.toSubcontract(zip);
						if("VOCs".equals(mt)){
							for (byte[] bs : zips) {
								DataTransmissionProtocol protocol = new DataTransmissionProtocol();
								protocol.setDataType("JZ22");
								protocol.setSiteCode(siteCode);
								protocol.setDataTime(datestr);
								protocol.setTotalPackage(1);
								protocol.setPacketNumber(zips.size());
								protocol.setHeadDelimiter("@@@");
								protocol.setData(bs);
								protocol.setTailDelimiter("tek");
								protocol.setCheckValue();
								protocol.setTerminator("####");
								try {
									queue.put(protocol);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}							
							}
							
						}
					}
				}
				Thread.sleep(Integer.parseInt(intervalTime)*1000);
			} catch (InterruptedException e1) {
				e1.printStackTrace();
			}
		}
	}
}
