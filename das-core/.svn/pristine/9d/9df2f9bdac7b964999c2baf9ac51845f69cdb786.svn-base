package com.cas.das.core.service.processor;

import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;

import com.cas.das.core.entity.DataTransmissionProtocol;
import com.cas.das.core.ftpclient.DocumentProcessing;
import com.cas.das.core.util.CodeCheckUtil;
import com.cas.platform.service.ServiceHandle;
import com.cas.platform.service.ServiceProcessor;
import com.cas.platform.service.def.param.TextParam;

public class FTPClientImportProcessor extends ServiceProcessor {

	@Override
	public void process(ServiceHandle handle, Object argument) {
		sendData(handle);
	}
	
	@SuppressWarnings("unchecked")
	public void sendData(ServiceHandle handle){
		LinkedBlockingQueue<DataTransmissionProtocol> queue = (LinkedBlockingQueue<DataTransmissionProtocol>) handle.getAttribute("queue");
		String monitorDir = (String) ((TextParam) handle.getServiceTypeParam("monitorDir")).getValue();
		String dataType = (String) ((TextParam) handle.getServiceTypeParam("dataType")).getValue();
		String headDelimiter = (String) ((TextParam) handle.getServiceTypeParam("headDelimiter")).getValue();
		String siteCode = (String) ((TextParam) handle.getServiceTypeParam("siteCode")).getValue();
		String tailDelimiter = (String) ((TextParam) handle.getServiceTypeParam("tailDelimiter")).getValue();
		String terminator = (String) ((TextParam) handle.getServiceTypeParam("terminator")).getValue();
		Map<String, String> map = DocumentProcessing.readFile(monitorDir);
		Set<String> keys = map.keySet();
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
		SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		if (keys.size() != 0) {
			for (String key : keys) {
				String datestring = key.split("-")[1];
				Date date = null;
				try {
					date = format.parse(datestring);
				} catch (ParseException e) {
					e.printStackTrace();
				}
				String datestr = format1.format(date);
				//得到要发送的数据字符串
				String value = map.get(key);
				byte[] zip = null;
				try {
					//对字符串进行压缩
					zip = CodeCheckUtil.compress(value.getBytes("GB2312"));
				} catch (UnsupportedEncodingException e1) {
					e1.printStackTrace();
				} catch (Exception e1) {
					e1.printStackTrace();
				}
				//得到压缩和分包后的数据字符串
				List<byte[]> zips = CodeCheckUtil.toSubcontract(zip);
				
				//TODO 数据压缩然后分包
				
				DataTransmissionProtocol protocol = new DataTransmissionProtocol();
				protocol.setData(zips.get(0));
				protocol.setDataTime(datestr);
				protocol.setDataType(dataType);
				protocol.setHeadDelimiter(headDelimiter);
				protocol.setSiteCode(siteCode);
				protocol.setTailDelimiter(tailDelimiter);
				protocol.setTerminator(terminator);
				protocol.setCheckValue();
				try {
					queue.put(protocol);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		} else {
			// 发送心跳包
			DataTransmissionProtocol protocol = new DataTransmissionProtocol();
			Date date = new Date();
			String datestring = format1.format(date);
			protocol.setDataTime(datestring);
			protocol.setDataType(dataType);
			protocol.setSiteCode(siteCode);
			protocol.setTerminator(terminator);
			try {
				queue.put(protocol);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	
}
