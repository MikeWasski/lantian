package com.cas.das.core.ftpclient;

import java.io.UnsupportedEncodingException;

import org.apache.log4j.Logger;
import org.apache.mina.core.buffer.IoBuffer;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.CumulativeProtocolDecoder;
import org.apache.mina.filter.codec.ProtocolDecoderOutput;

import com.cas.das.core.util.CodeCheckUtil;

public class MessageDecoder extends CumulativeProtocolDecoder {

	private static Logger log = Logger.getLogger(MessageDecoder.class);

	private String charset;

	public MessageDecoder(String charset) {
		this.charset = charset;
	}

	@Override
	protected synchronized boolean doDecode(IoSession session, IoBuffer in, ProtocolDecoderOutput out)
			throws Exception {
		in.mark();
		byte[] rqByte = new byte[4];
		in.get(rqByte);
		String dataType = new String(rqByte,charset);
		if("JC09".equals(dataType)){
			return dataRetrieval( session,  in,  out, rqByte, dataType);
		}
		log.warn("不是指定请求");
		in.reset();
		return false;
	}
	//数据回补请求调用
	private boolean dataRetrieval(IoSession session, IoBuffer in, ProtocolDecoderOutput out,byte[] rqByte,String dataType) throws Exception{
		StringBuilder request = new StringBuilder(dataType);
		rqByte = new byte[10];
		in.get(rqByte);
		String siteCode = new String(rqByte,charset);
		request.append(siteCode);
		rqByte = new byte[19];
		in.get(rqByte);
		String dataTime = new String(rqByte,charset);
		request.append(dataTime);
		rqByte = new byte[4];
		in.get(rqByte);
		String dataLength = new String(rqByte,charset);
		request.append(dataLength);
		if(in.remaining() >= (Integer.parseInt(dataLength,16)+3+3+2+4)){
			rqByte = new byte[3];
			in.get(rqByte);
			String headDelimiter = new String(rqByte,charset);
			request.append(headDelimiter);
			rqByte = new byte[Integer.parseInt(dataLength,16)];
			in.get(rqByte);
			String data = new String(rqByte,charset);
			request.append(data);
			rqByte = new byte[3];
			in.get(rqByte);
			String tailDelimiter = new String(rqByte,charset);
			request.append(tailDelimiter);
			rqByte = new byte[2];
			in.get(rqByte);
			String checkValue = new String(rqByte,charset);
			request.append(checkValue);
			rqByte = new byte[4];
			in.get(rqByte);
			String terminator = new String(rqByte,charset);
			request.append(terminator);
			//System.out.println(request.toString());
			if(CodeCheckUtil.checksumXOR(request.toString())){
				out.write(request.toString());
			}else{
				log.warn("校验值不正确");
			}
			if (in.remaining() > 0) {
				log.warn("粘包长度 package left=" + in.remaining());
				in.reset();
				return true;
			}
			return false;
		}
		log.warn("********** 数据报文不完整 **********  断包长度： " + in.remaining());
		return false;
	}

}
